// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Service.MedicalRecord.Context;

namespace Service.MedicalRecord.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230323221812_Cotizaciones_Col_Descuento")]
    partial class Cotizaciones_Col_Descuento
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Service.MedicalRecord.Domain.Appointments.AppointmentDom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Celular")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cita")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estatus_Cita")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExpedienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaCita")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HoraCita")
                        .HasColumnType("datetime2");

                    b.Property<string>("Indicaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombrePaciente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WhatsApp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExpedienteId");

                    b.ToTable("CAT_Cita_Dom");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Appointments.AppointmentLab", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Cita")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompaniaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExpedienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaCita")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HoraCita")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MedicoID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NombrePaciente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Procedencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("SucursalID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WhatsApp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExpedienteId");

                    b.ToTable("CAT_Cita_Lab");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Catalogs.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ciudad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("CiudadId")
                        .HasColumnType("smallint");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clinicos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoPostal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CAT_Sucursal");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Catalogs.Cap", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CAT_Tipo_Tapon");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Catalogs.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CAT_Compañia");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Catalogs.Maquila", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CAT_Maquila");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Catalogs.Medic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CAT_Medico");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.ClinicResults", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CriticoMaximo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CriticoMinimo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("DeltaCheck")
                        .HasColumnType("bit");

                    b.Property<int>("EstudioId")
                        .HasColumnType("int");

                    b.Property<string>("FCSI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Formula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreCorto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservacionesId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<Guid>("ParametroId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Resultado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SolicitudEstudioId")
                        .HasColumnType("int");

                    b.Property<Guid>("SolicitudId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TipoValorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UltimaSolicitudId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UltimoResultado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unidades")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValorFinal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValorInicial")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SolicitudEstudioId");

                    b.HasIndex("SolicitudId");

                    b.ToTable("Resultados_Clinicos");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.ClinicalResultsPathological", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescripcionMacroscopica")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescripcionMicroscopica")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnostico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagenPatologica")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MedicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MuestraRecibida")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestStudyId")
                        .HasColumnType("int");

                    b.Property<int>("SolicitudEstudioId")
                        .HasColumnType("int");

                    b.Property<Guid>("SolicitudId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MedicoId");

                    b.HasIndex("SolicitudEstudioId");

                    b.HasIndex("SolicitudId");

                    b.ToTable("Cat_Captura_ResultadosPatologicos");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.DeliveryHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SolicitudEstudioId")
                        .HasColumnType("int");

                    b.Property<Guid>("SolicitudId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsuarioNombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Historial_Envios");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Invoice.InvoiceCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BancoId")
                        .HasColumnType("int");

                    b.Property<decimal>("CantidadTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ClaveExterna")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompañiaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Consecutivo")
                        .HasColumnType("int");

                    b.Property<int>("DiasCredito")
                        .HasColumnType("int");

                    b.Property<string>("DireccionFiscal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExpedienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FacturaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FacturapiId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<string>("FormaPago")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormaPagoId")
                        .HasColumnType("int");

                    b.Property<decimal>("IVA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroCuenta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrigenFactura")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RFC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RazonSocial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegimenFiscal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Serie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("TaxDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TipoDesgloce")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoFactura")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoPago")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsoCFDI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompañiaId");

                    b.HasIndex("TaxDataId");

                    b.ToTable("Factura_Compania");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Invoice.InvoiceCompanyDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("ClaveProdServ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Concepto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EstudioClave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FacturaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Importe")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SolicitudClave")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacturaId");

                    b.ToTable("Relacion_Factura_Detalle");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Invoice.RequestInvoiceCompany", b =>
                {
                    b.Property<Guid>("SolicitudId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceCompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SolicitudId", "InvoiceCompanyId");

                    b.HasIndex("InvoiceCompanyId");

                    b.ToTable("Relacion_Solicitud_Factura_Compania");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.MedicalRecord.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Calle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Celular")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ciudad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoPostal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ColoniaId")
                        .HasColumnType("int");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Expediente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaActivacionMonedero")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaDeNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdSucursal")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Monedero")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("MonederoActivo")
                        .HasColumnType("bit");

                    b.Property<string>("NombrePaciente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimerApellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SegundoApellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CAT_Expedientes");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.MedicalRecord.MedicalRecordTaxData", b =>
                {
                    b.Property<Guid>("FacturaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExpedienteID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isDefaultTaxData")
                        .HasColumnType("bit");

                    b.HasKey("FacturaID", "ExpedienteID");

                    b.HasIndex("ExpedienteID");

                    b.ToTable("Relacion_Expediente_Factura");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Quotation.Quotation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompañiaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EnvioCorreo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnvioWhatsApp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("EstatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<Guid?>("ExpedienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MedicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Procedencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)2);

                    b.Property<Guid>("SucursalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalEstudios")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UsuarioCreo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompañiaId");

                    b.HasIndex("EstatusId");

                    b.HasIndex("ExpedienteId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("SucursalId");

                    b.ToTable("CAT_Cotizacion");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Quotation.QuotationPack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AplicaCargo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CotizacionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DescuentoPorcentaje")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Dias")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<int>("Horas")
                        .HasColumnType("int");

                    b.Property<string>("ListaPrecio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ListaPrecioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaqueteId")
                        .HasColumnType("int");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrecioFinal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Promocion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PromocionId")
                        .HasColumnType("int");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CotizacionId");

                    b.ToTable("Relacion_Cotizacion_Paquete");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Quotation.QuotationStudy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AplicaCargo")
                        .HasColumnType("bit");

                    b.Property<Guid?>("AppointmentDomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppointmentLabId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CotizacionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DescuentoPorcentaje")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Dias")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EstudioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<int>("Horas")
                        .HasColumnType("int");

                    b.Property<string>("ListaPrecio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ListaPrecioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaqueteId")
                        .HasColumnType("int");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrecioFinal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Promocion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PromocionId")
                        .HasColumnType("int");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentDomId");

                    b.HasIndex("AppointmentLabId");

                    b.HasIndex("CotizacionId");

                    b.HasIndex("PaqueteId");

                    b.ToTable("Relacion_Cotizacion_Estudio");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Request.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Afiliacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Cargo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClavePatologica")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompañiaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Copago")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EnvioCorreo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnvioMedico")
                        .HasColumnType("bit");

                    b.Property<string>("EnvioWhatsApp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsNuevo")
                        .HasColumnType("bit");

                    b.Property<byte>("EstatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<Guid>("ExpedienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<string>("FolioWeeClinic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdOrden")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdPersona")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MedicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Parcialidad")
                        .HasColumnType("bit");

                    b.Property<byte>("Procedencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)2);

                    b.Property<string>("RutaINE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RutaINEReverso")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RutaOrden")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Serie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerieNumero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SucursalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TokenValidado")
                        .HasColumnType("bit");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalEstudios")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("Urgencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("UsuarioCreo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompañiaId");

                    b.HasIndex("EstatusId");

                    b.HasIndex("ExpedienteId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("SucursalId");

                    b.ToTable("CAT_Solicitud");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Request.RequestImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ruta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SolicitudId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SolicitudId");

                    b.ToTable("Relacion_Solicitud_Imagen");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Request.RequestPack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DescuentoPorcentaje")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Dias")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<int>("Horas")
                        .HasColumnType("int");

                    b.Property<string>("ListaPrecio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ListaPrecioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaqueteId")
                        .HasColumnType("int");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrecioFinal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Promocion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PromocionId")
                        .HasColumnType("int");

                    b.Property<Guid>("SolicitudId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SolicitudId");

                    b.ToTable("Relacion_Solicitud_Paquete");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Request.RequestPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("EstatusId")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("FacturaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FacturapiId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("datetime2");

                    b.Property<string>("FormaPago")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormaPagoId")
                        .HasColumnType("int");

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroCuenta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Serie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerieFactura")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SolicitudId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsuarioRegistra")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EstatusId");

                    b.HasIndex("SolicitudId");

                    b.ToTable("Relacion_Solicitud_Pago");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Request.RequestStudy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DescuentoPorcentaje")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("DestinoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Dias")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("EstatusId")
                        .HasColumnType("tinyint");

                    b.Property<int>("EstudioId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaCaptura")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaEntrega")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("FechaEnviado")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaLiberado")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaPendiente")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaSolicitado")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaTomaMuestra")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaValidacion")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("Horas")
                        .HasColumnType("int");

                    b.Property<string>("IdArchivoWeeClinic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListaPrecio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ListaPrecioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("MaquilaId")
                        .HasColumnType("int");

                    b.Property<string>("MedioSolicitado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metodo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrdenEstudio")
                        .HasColumnType("int");

                    b.Property<int?>("PaqueteId")
                        .HasColumnType("int");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrecioFinal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Promocion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PromocionId")
                        .HasColumnType("int");

                    b.Property<Guid>("SolicitudId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TaponId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioCaptura")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsuarioEnviado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioLiberado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsuarioPendiente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioSolicitado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioTomaMuestra")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioValidacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EstatusId");

                    b.HasIndex("MaquilaId");

                    b.HasIndex("PaqueteId");

                    b.HasIndex("SolicitudId");

                    b.HasIndex("TaponId");

                    b.ToTable("Relacion_Solicitud_Estudio");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Request.RequestStudyWee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Asignado")
                        .HasColumnType("bit");

                    b.Property<string>("Cubierto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdNodo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdServicio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsAvailable")
                        .HasColumnType("int");

                    b.Property<int>("IsCancel")
                        .HasColumnType("int");

                    b.Property<int>("RestanteDays")
                        .HasColumnType("int");

                    b.Property<int>("SolicitudEstudioId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAseguradora")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPaciente")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Vigencia")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SolicitudEstudioId")
                        .IsUnique();

                    b.ToTable("Relacion_Estudio_WeeClinic");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Request.RequestTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaveEtiqueta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaveInicial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Destino")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinoId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("DestinoTipo")
                        .HasColumnType("tinyint");

                    b.Property<int>("EtiquetaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreEtiqueta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SolicitudId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TrackingOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SolicitudId");

                    b.HasIndex("TrackingOrderId");

                    b.ToTable("Relacion_Solicitud_Etiquetas");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Request.RequestTagStudy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EstudioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreEstudio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<int>("SolicitudEtiquetaId")
                        .HasColumnType("int");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SolicitudEtiquetaId");

                    b.ToTable("RequestTagStudy");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.RouteTracking.RouteTracking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaDeEntregaEstimada")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HoraDeRecoleccion")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RutaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SegumientoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SolicitudId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SucursalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SolicitudId");

                    b.ToTable("Cat_PendientesDeEnviar");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Status.StatusPriceQuote", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Estatus_Cotizacion");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Status.StatusRequest", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Estatus_Solicitud");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Status.StatusRequestPayment", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Estatus_Solicitud_Pago");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Status.StatusRequestStudy", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Estatus_Solicitud_Estudio");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.TaxData.TaxData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Calle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ciudad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoPostal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ColoniaId")
                        .HasColumnType("int");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<string>("RFC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RazonSocial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegimenFiscal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isDefaultTaxData")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CAT_Datos_Fiscales");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.TrackingOrder.TrackingOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinoId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DiaRecoleccion")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Escaneo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaEntrega")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaquiladorId")
                        .HasColumnType("int");

                    b.Property<string>("Muestra")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrigenId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RutaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Temperatura")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioModId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CAT_Seguimiento_Ruta");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.TrackingOrder.TrackingOrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Escaneado")
                        .HasColumnType("bit");

                    b.Property<int>("EtiquetaId")
                        .HasColumnType("int");

                    b.Property<Guid>("ExpedienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsExtra")
                        .HasColumnType("bit");

                    b.Property<string>("NombrePaciente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SeguimientoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SolicitudId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioModId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EtiquetaId");

                    b.HasIndex("SeguimientoId");

                    b.HasIndex("SolicitudId");

                    b.ToTable("Relacion_Seguimiento_Solicitud");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Appointments.AppointmentDom", b =>
                {
                    b.HasOne("Service.MedicalRecord.Domain.MedicalRecord.MedicalRecord", "Expediente")
                        .WithMany()
                        .HasForeignKey("ExpedienteId");

                    b.Navigation("Expediente");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Appointments.AppointmentLab", b =>
                {
                    b.HasOne("Service.MedicalRecord.Domain.MedicalRecord.MedicalRecord", "Expediente")
                        .WithMany()
                        .HasForeignKey("ExpedienteId");

                    b.Navigation("Expediente");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.ClinicResults", b =>
                {
                    b.HasOne("Service.MedicalRecord.Domain.Request.RequestStudy", "SolicitudEstudio")
                        .WithMany("Resultados")
                        .HasForeignKey("SolicitudEstudioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Service.MedicalRecord.Domain.Request.Request", "Solicitud")
                        .WithMany()
                        .HasForeignKey("SolicitudId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Solicitud");

                    b.Navigation("SolicitudEstudio");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.ClinicalResultsPathological", b =>
                {
                    b.HasOne("Service.MedicalRecord.Domain.Catalogs.Medic", "Medico")
                        .WithMany()
                        .HasForeignKey("MedicoId");

                    b.HasOne("Service.MedicalRecord.Domain.Request.RequestStudy", "SolicitudEstudio")
                        .WithMany("ResultadosPatologicos")
                        .HasForeignKey("SolicitudEstudioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Service.MedicalRecord.Domain.Request.Request", "Solicitud")
                        .WithMany()
                        .HasForeignKey("SolicitudId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medico");

                    b.Navigation("Solicitud");

                    b.Navigation("SolicitudEstudio");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Invoice.InvoiceCompany", b =>
                {
                    b.HasOne("Service.MedicalRecord.Domain.Catalogs.Company", "Compañia")
                        .WithMany()
                        .HasForeignKey("CompañiaId");

                    b.HasOne("Service.MedicalRecord.Domain.TaxData.TaxData", "TaxData")
                        .WithMany()
                        .HasForeignKey("TaxDataId");

                    b.Navigation("Compañia");

                    b.Navigation("TaxData");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Invoice.InvoiceCompanyDetail", b =>
                {
                    b.HasOne("Service.MedicalRecord.Domain.Invoice.InvoiceCompany", "Factura")
                        .WithMany("DetalleFactura")
                        .HasForeignKey("FacturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factura");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Invoice.RequestInvoiceCompany", b =>
                {
                    b.HasOne("Service.MedicalRecord.Domain.Invoice.InvoiceCompany", "InvoiceCompany")
                        .WithMany()
                        .HasForeignKey("InvoiceCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.MedicalRecord.Domain.Request.Request", "Solicitud")
                        .WithMany()
                        .HasForeignKey("SolicitudId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceCompany");

                    b.Navigation("Solicitud");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.MedicalRecord.MedicalRecordTaxData", b =>
                {
                    b.HasOne("Service.MedicalRecord.Domain.MedicalRecord.MedicalRecord", "Expediente")
                        .WithMany("TaxData")
                        .HasForeignKey("ExpedienteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Service.MedicalRecord.Domain.TaxData.TaxData", "Factura")
                        .WithMany()
                        .HasForeignKey("FacturaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expediente");

                    b.Navigation("Factura");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Quotation.Quotation", b =>
                {
                    b.HasOne("Service.MedicalRecord.Domain.Catalogs.Company", "Compañia")
                        .WithMany()
                        .HasForeignKey("CompañiaId");

                    b.HasOne("Service.MedicalRecord.Domain.Status.StatusPriceQuote", "Estatus")
                        .WithMany()
                        .HasForeignKey("EstatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.MedicalRecord.Domain.MedicalRecord.MedicalRecord", "Expediente")
                        .WithMany()
                        .HasForeignKey("ExpedienteId");

                    b.HasOne("Service.MedicalRecord.Domain.Catalogs.Medic", "Medico")
                        .WithMany()
                        .HasForeignKey("MedicoId");

                    b.HasOne("Service.MedicalRecord.Domain.Catalogs.Branch", "Sucursal")
                        .WithMany()
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compañia");

                    b.Navigation("Estatus");

                    b.Navigation("Expediente");

                    b.Navigation("Medico");

                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Quotation.QuotationPack", b =>
                {
                    b.HasOne("Service.MedicalRecord.Domain.Quotation.Quotation", "Cotizacion")
                        .WithMany("Paquetes")
                        .HasForeignKey("CotizacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cotizacion");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Quotation.QuotationStudy", b =>
                {
                    b.HasOne("Service.MedicalRecord.Domain.Appointments.AppointmentDom", null)
                        .WithMany("Estudios")
                        .HasForeignKey("AppointmentDomId");

                    b.HasOne("Service.MedicalRecord.Domain.Appointments.AppointmentLab", null)
                        .WithMany("Estudios")
                        .HasForeignKey("AppointmentLabId");

                    b.HasOne("Service.MedicalRecord.Domain.Quotation.Quotation", "Cotizacion")
                        .WithMany("Estudios")
                        .HasForeignKey("CotizacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Service.MedicalRecord.Domain.Quotation.QuotationPack", "Paquete")
                        .WithMany("Estudios")
                        .HasForeignKey("PaqueteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Cotizacion");

                    b.Navigation("Paquete");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Request.Request", b =>
                {
                    b.HasOne("Service.MedicalRecord.Domain.Catalogs.Company", "Compañia")
                        .WithMany()
                        .HasForeignKey("CompañiaId");

                    b.HasOne("Service.MedicalRecord.Domain.Status.StatusRequest", "Estatus")
                        .WithMany()
                        .HasForeignKey("EstatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.MedicalRecord.Domain.MedicalRecord.MedicalRecord", "Expediente")
                        .WithMany()
                        .HasForeignKey("ExpedienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.MedicalRecord.Domain.Catalogs.Medic", "Medico")
                        .WithMany()
                        .HasForeignKey("MedicoId");

                    b.HasOne("Service.MedicalRecord.Domain.Catalogs.Branch", "Sucursal")
                        .WithMany()
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compañia");

                    b.Navigation("Estatus");

                    b.Navigation("Expediente");

                    b.Navigation("Medico");

                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Request.RequestImage", b =>
                {
                    b.HasOne("Service.MedicalRecord.Domain.Request.Request", "Solicitud")
                        .WithMany("Imagenes")
                        .HasForeignKey("SolicitudId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Solicitud");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Request.RequestPack", b =>
                {
                    b.HasOne("Service.MedicalRecord.Domain.Request.Request", "Solicitud")
                        .WithMany("Paquetes")
                        .HasForeignKey("SolicitudId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Solicitud");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Request.RequestPayment", b =>
                {
                    b.HasOne("Service.MedicalRecord.Domain.Status.StatusRequestPayment", "Estatus")
                        .WithMany()
                        .HasForeignKey("EstatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.MedicalRecord.Domain.Request.Request", "Solicitud")
                        .WithMany("Pagos")
                        .HasForeignKey("SolicitudId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estatus");

                    b.Navigation("Solicitud");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Request.RequestStudy", b =>
                {
                    b.HasOne("Service.MedicalRecord.Domain.Status.StatusRequestStudy", "Estatus")
                        .WithMany()
                        .HasForeignKey("EstatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.MedicalRecord.Domain.Catalogs.Maquila", "Maquila")
                        .WithMany()
                        .HasForeignKey("MaquilaId");

                    b.HasOne("Service.MedicalRecord.Domain.Request.RequestPack", "Paquete")
                        .WithMany("Estudios")
                        .HasForeignKey("PaqueteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Service.MedicalRecord.Domain.Request.Request", "Solicitud")
                        .WithMany("Estudios")
                        .HasForeignKey("SolicitudId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Service.MedicalRecord.Domain.Catalogs.Cap", "Tapon")
                        .WithMany()
                        .HasForeignKey("TaponId");

                    b.Navigation("Estatus");

                    b.Navigation("Maquila");

                    b.Navigation("Paquete");

                    b.Navigation("Solicitud");

                    b.Navigation("Tapon");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Request.RequestStudyWee", b =>
                {
                    b.HasOne("Service.MedicalRecord.Domain.Request.RequestStudy", "SolicitudEstudio")
                        .WithOne("EstudioWeeClinic")
                        .HasForeignKey("Service.MedicalRecord.Domain.Request.RequestStudyWee", "SolicitudEstudioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SolicitudEstudio");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Request.RequestTag", b =>
                {
                    b.HasOne("Service.MedicalRecord.Domain.Request.Request", "Solicitud")
                        .WithMany("Etiquetas")
                        .HasForeignKey("SolicitudId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Service.MedicalRecord.Domain.TrackingOrder.TrackingOrder", null)
                        .WithMany("Etiquetas")
                        .HasForeignKey("TrackingOrderId");

                    b.Navigation("Solicitud");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Request.RequestTagStudy", b =>
                {
                    b.HasOne("Service.MedicalRecord.Domain.Request.RequestTag", "SolicitudEtiqueta")
                        .WithMany("Estudios")
                        .HasForeignKey("SolicitudEtiquetaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SolicitudEtiqueta");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.RouteTracking.RouteTracking", b =>
                {
                    b.HasOne("Service.MedicalRecord.Domain.Request.Request", "Solicitud")
                        .WithMany()
                        .HasForeignKey("SolicitudId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Solicitud");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.TrackingOrder.TrackingOrderDetail", b =>
                {
                    b.HasOne("Service.MedicalRecord.Domain.Request.RequestTag", "Etiqueta")
                        .WithMany()
                        .HasForeignKey("EtiquetaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Service.MedicalRecord.Domain.TrackingOrder.TrackingOrder", "Seguimiento")
                        .WithMany("Estudios")
                        .HasForeignKey("SeguimientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.MedicalRecord.Domain.Request.Request", "Solicitud")
                        .WithMany()
                        .HasForeignKey("SolicitudId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Etiqueta");

                    b.Navigation("Seguimiento");

                    b.Navigation("Solicitud");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Appointments.AppointmentDom", b =>
                {
                    b.Navigation("Estudios");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Appointments.AppointmentLab", b =>
                {
                    b.Navigation("Estudios");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Invoice.InvoiceCompany", b =>
                {
                    b.Navigation("DetalleFactura");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.MedicalRecord.MedicalRecord", b =>
                {
                    b.Navigation("TaxData");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Quotation.Quotation", b =>
                {
                    b.Navigation("Estudios");

                    b.Navigation("Paquetes");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Quotation.QuotationPack", b =>
                {
                    b.Navigation("Estudios");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Request.Request", b =>
                {
                    b.Navigation("Estudios");

                    b.Navigation("Etiquetas");

                    b.Navigation("Imagenes");

                    b.Navigation("Pagos");

                    b.Navigation("Paquetes");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Request.RequestPack", b =>
                {
                    b.Navigation("Estudios");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Request.RequestStudy", b =>
                {
                    b.Navigation("EstudioWeeClinic");

                    b.Navigation("Resultados");

                    b.Navigation("ResultadosPatologicos");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.Request.RequestTag", b =>
                {
                    b.Navigation("Estudios");
                });

            modelBuilder.Entity("Service.MedicalRecord.Domain.TrackingOrder.TrackingOrder", b =>
                {
                    b.Navigation("Estudios");

                    b.Navigation("Etiquetas");
                });
#pragma warning restore 612, 618
        }
    }
}
