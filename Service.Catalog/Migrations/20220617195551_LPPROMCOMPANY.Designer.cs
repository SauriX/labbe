// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Service.Catalog.Context;

namespace Service.Catalog.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220617195551_LPPROMCOMPANY")]
    partial class LPPROMCOMPANY
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Identidad.Api.Model.Medicos.MedicClinic", b =>
                {
                    b.Property<Guid>("MedicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClinicaId")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaCreo")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UsuarioCreoId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MedicoId", "ClinicaId");

                    b.HasIndex("ClinicaId");

                    b.ToTable("CAT_Medico_Clinica");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Branch.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Calle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ciudad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClinicosId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Codigopostal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ColoniaId")
                        .HasColumnType("int");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FacturaciónId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroExterior")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroInterior")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PresupuestosId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServicioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ColoniaId");

                    b.ToTable("CAT_Sucursal");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Branch.BranchDepartment", b =>
                {
                    b.Property<Guid>("SucursalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SucursalId", "DepartamentoId");

                    b.HasIndex("DepartamentoId");

                    b.ToTable("CAT_Sucursal_Departamento");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Branch.BranchStudy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EstudioId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Relacion_Estudio_Sucursal");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Catalog.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoId");

                    b.ToTable("CAT_Area");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Catalog.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CAT_Banco");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Catalog.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CAT_Clinica");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Catalog.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CAT_Paqueteria");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Catalog.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CAT_Departamento");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Catalog.Dimension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<byte>("Ancho")
                        .HasColumnType("tinyint");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Largo")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CAT_Dimension");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Catalog.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CAT_Especialidad");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Catalog.Indicator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CAT_Indicador");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Catalog.Method", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CAT_Metodo");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Catalog.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CAT_FormaPago");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Catalog.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CAT_MetodoPago");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Catalog.SampleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CAT_TipoMuestra");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Catalog.Units", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CAT_Units");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Catalog.UseOfCFDI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CAT_CFDI");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Catalog.WorkList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CAT_ListaTrabajo");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Company.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int?>("BancoId")
                        .HasColumnType("int");

                    b.Property<int?>("CFDIId")
                        .HasColumnType("int");

                    b.Property<string>("Ciudad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CodigoPostal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("DiasCredito")
                        .HasColumnType("int");

                    b.Property<string>("EmailEmpresarial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreo")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FormaDePagoId")
                        .HasColumnType("int");

                    b.Property<string>("LimiteDeCredito")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MetodoDePagoId")
                        .HasColumnType("int");

                    b.Property<string>("NombreComercial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NumeroDeCuenta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProcedenciaId")
                        .HasColumnType("int");

                    b.Property<string>("RFC")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RazonSocial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UsuarioCreoId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProcedenciaId");

                    b.ToTable("CAT_Compañia");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Company.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Apellidos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompañiaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Telefono")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompañiaId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Company.Price_Company", b =>
                {
                    b.Property<Guid>("PrecioListaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompañiaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("UsuarioCreoId")
                        .HasColumnType("bigint");

                    b.Property<string>("UsuarioModId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrecioListaId", "CompañiaId");

                    b.HasIndex("CompañiaId");

                    b.ToTable("CAT_ListaP_Compañia");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Constant.City", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ciudad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("EstadoId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.ToTable("CAT_Ciudad");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Constant.Colony", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("CiudadId")
                        .HasColumnType("smallint");

                    b.Property<string>("CodigoPostal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Colonia")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CiudadId");

                    b.ToTable("CAT_Colonia");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Constant.State", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CAT_Estado");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Indication.Indication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CAT_Indicacion");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Indication.IndicationStudy", b =>
                {
                    b.Property<int>("EstudioId")
                        .HasColumnType("int");

                    b.Property<int>("IndicacionId")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaMod")
                        .HasColumnType("smalldatetime");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EstudioId", "IndicacionId");

                    b.HasIndex("IndicacionId");

                    b.ToTable("Relacion_Estudio_Indicacion");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Loyalty.Loyalty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<decimal>("CantidadDescuento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaFinal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicial")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaMod")
                        .HasColumnType("date");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PrecioListaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TipoDescuento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PrecioListaId");

                    b.ToTable("CAT_Lealtad");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Maquila.Maquila", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ColoniaId")
                        .HasColumnType("int");

                    b.Property<string>("Correo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NumeroExterior")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NumeroInterior")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PaginaWeb")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ColoniaId");

                    b.ToTable("CAT_Maquilador");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Medics.Medics", b =>
                {
                    b.Property<Guid>("IdMedico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Celular")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CiudadId")
                        .HasMaxLength(15)
                        .HasColumnType("bigint");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("CodigoPostal")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<int>("ColoniaId")
                        .HasColumnType("int");

                    b.Property<string>("Correo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EspecialidadId")
                        .HasColumnType("int");

                    b.Property<long?>("EstadoId")
                        .HasMaxLength(15)
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NumeroExterior")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NumeroInterior")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PrimerApellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SegundoApellido")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdMedico");

                    b.HasIndex("ColoniaId");

                    b.HasIndex("EspecialidadId");

                    b.ToTable("CAT_Medico");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Packet.Packet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NombreLargo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Visibilidad")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("CAT_Paquete");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Parameter.Format", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Cat_Formato");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Parameter.Parameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Clave")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentoId")
                        .HasColumnType("int");

                    b.Property<string>("FCSI")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormatoImpresionId")
                        .HasColumnType("int");

                    b.Property<string>("Formula")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NombreCorto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ReactivoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TipoValor")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("0");

                    b.Property<int>("UnidadSi")
                        .HasColumnType("int");

                    b.Property<int>("Unidades")
                        .HasColumnType("int");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ValorInicial")
                        .HasMaxLength(100)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("DepartmentoId");

                    b.HasIndex("FormatoImpresionId");

                    b.HasIndex("ReactivoId");

                    b.ToTable("CAT_Parametro");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Parameter.ParameterStudy", b =>
                {
                    b.Property<int>("EstudioId")
                        .HasColumnType("int");

                    b.Property<Guid>("ParametroId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaMod")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("UsuarioCreoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsuarioModId")
                        .HasColumnType("int");

                    b.HasKey("EstudioId", "ParametroId");

                    b.HasIndex("ParametroId");

                    b.ToTable("Relacion_Estudio_Parametro");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Parameter.ParameterValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("DescripcionParrafo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescripcionTexto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("HombreValorFinal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HombreValorInicial")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("MedidaTiempoId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("MujerValorFinal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MujerValorInicial")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParametroId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RangoEdadFinal")
                        .HasColumnType("int");

                    b.Property<int>("RangoEdadInicial")
                        .HasColumnType("int");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ValorFinal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorFinalNumerico")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorInicial")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorInicialNumerico")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ParametroId");

                    b.ToTable("CAT_Tipo_Valor");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Price.PriceList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Visibilidad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CAT_ListaPrecio");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Price.PriceList_Packet", b =>
                {
                    b.Property<Guid>("PrecioListaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaqueteId")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("UsuarioCreoId")
                        .HasColumnType("bigint");

                    b.Property<string>("UsuarioModId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrecioListaId", "PaqueteId");

                    b.HasIndex("PaqueteId");

                    b.ToTable("Relacion_ListaP_Paquete");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Price.PriceList_Study", b =>
                {
                    b.Property<Guid>("PrecioListaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EstudioId")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("UsuarioCreoId")
                        .HasColumnType("bigint");

                    b.Property<string>("UsuarioModId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrecioListaId", "EstudioId");

                    b.HasIndex("EstudioId");

                    b.ToTable("Relacion_ListaP_Estudio");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Price.Price_Branch", b =>
                {
                    b.Property<Guid>("PrecioListaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SucursalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("UsuarioCreoId")
                        .HasColumnType("bigint");

                    b.Property<string>("UsuarioModId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrecioListaId", "SucursalId");

                    b.HasIndex("SucursalId");

                    b.ToTable("CAT_ListaP_Sucursal");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Price.Price_Medics", b =>
                {
                    b.Property<Guid>("PrecioListaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("UsuarioCreoId")
                        .HasColumnType("bigint");

                    b.Property<string>("UsuarioModId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrecioListaId", "MedicoId");

                    b.HasIndex("MedicoId");

                    b.ToTable("CAT_ListaP_Medicos");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Price.Price_Promotion", b =>
                {
                    b.Property<Guid>("PrecioListaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PromocionId")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("UsuarioCreoId")
                        .HasColumnType("bigint");

                    b.Property<string>("UsuarioModId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrecioListaId", "PromocionId");

                    b.HasIndex("PromocionId");

                    b.ToTable("CAT_ListaP_Promocion");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Promotion.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<decimal>("CantidadDescuento")
                        .HasMaxLength(100)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Clave")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Domingo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaFinal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Jueves")
                        .HasColumnType("bit");

                    b.Property<bool>("Lunes")
                        .HasColumnType("bit");

                    b.Property<bool>("Martes")
                        .HasColumnType("bit");

                    b.Property<bool>("Miercoles")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PrecioListaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Sabado")
                        .HasColumnType("bit");

                    b.Property<string>("TipoDeDescuento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioCreoId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioModificoId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Viernes")
                        .HasColumnType("bit");

                    b.Property<bool>("Visibilidad")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CAT_Promocion");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Promotion.PromotionBranch", b =>
                {
                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioModId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PromotionId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("Relacion_Promocion_Sucursal");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Promotion.PromotionLoyality", b =>
                {
                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.Property<Guid>("LoyaltyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioModId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PromotionId", "LoyaltyId");

                    b.HasIndex("LoyaltyId");

                    b.ToTable("Relacion_Promocion_Lealtad");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Promotion.PromotionPack", b =>
                {
                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.Property<int>("PackId")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<decimal>("DiscountNumeric")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discountporcent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Domingo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaFinal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Jueves")
                        .HasColumnType("bit");

                    b.Property<bool>("Loyality")
                        .HasColumnType("bit");

                    b.Property<bool>("Lunes")
                        .HasColumnType("bit");

                    b.Property<bool>("Martes")
                        .HasColumnType("bit");

                    b.Property<bool>("Miercoles")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Sabado")
                        .HasColumnType("bit");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioModId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Viernes")
                        .HasColumnType("bit");

                    b.HasKey("PromotionId", "PackId");

                    b.HasIndex("PackId");

                    b.ToTable("Relacion_Promocion_Paquete");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Promotion.PromotionStudy", b =>
                {
                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.Property<int>("StudyId")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<decimal>("DiscountNumeric")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discountporcent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Domingo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaFinal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Jueves")
                        .HasColumnType("bit");

                    b.Property<bool>("Loyality")
                        .HasColumnType("bit");

                    b.Property<bool>("Lunes")
                        .HasColumnType("bit");

                    b.Property<bool>("Martes")
                        .HasColumnType("bit");

                    b.Property<bool>("Miercoles")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Sabado")
                        .HasColumnType("bit");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioModId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Viernes")
                        .HasColumnType("bit");

                    b.HasKey("PromotionId", "StudyId");

                    b.HasIndex("StudyId");

                    b.ToTable("Relacion_Promocion_Estudio");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Provenance.Provenance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CAT_Procedencia");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Reagent.Reagent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ClaveSistema")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NombreSistema")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioModificoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CAT_Reactivo_Contpaq");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Route.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Comentarios")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiasDeEntrega")
                        .HasColumnType("int");

                    b.Property<bool>("Domingo")
                        .HasColumnType("bit");

                    b.Property<string>("EstudioId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreo")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("FechaFinal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaInicial")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifico")
                        .HasColumnType("smalldatetime");

                    b.Property<decimal>("FormatoDeTiempoId")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("HoraDeEntrega")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HoraDeEntregaEstimada")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HoraDeRecoleccion")
                        .HasColumnType("int");

                    b.Property<Guid?>("IdResponsableEnvio")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdResponsableRecepcion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Jueves")
                        .HasColumnType("bit");

                    b.Property<bool>("Lunes")
                        .HasColumnType("bit");

                    b.Property<bool?>("Maquilador")
                        .HasColumnType("bit");

                    b.Property<int?>("MaquiladorId")
                        .HasColumnType("int");

                    b.Property<bool>("Martes")
                        .HasColumnType("bit");

                    b.Property<bool>("Miercoles")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PaqueteriaId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("RequierePaqueteria")
                        .HasColumnType("bit");

                    b.Property<bool>("Sabado")
                        .HasColumnType("bit");

                    b.Property<int?>("SeguimientoPaqueteria")
                        .HasColumnType("int");

                    b.Property<string>("SucursalDestinoId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SucursalOrigenId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TiempoDeEntrega")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioCreoId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioModificoId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Viernes")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CAT_Rutas");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Route.Route_Study", b =>
                {
                    b.Property<Guid>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EstudioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<long>("UsuarioCreoId")
                        .HasColumnType("bigint");

                    b.Property<string>("UsuarioModId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RouteId", "EstudioId");

                    b.HasIndex("EstudioId");

                    b.ToTable("Relacion_Ruta_Estudio");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Study.PacketStudy", b =>
                {
                    b.Property<int>("EstudioId")
                        .HasColumnType("int");

                    b.Property<int>("PacketId")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsuarioCreoId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsuarioModId")
                        .HasColumnType("int");

                    b.HasKey("EstudioId", "PacketId");

                    b.HasIndex("PacketId");

                    b.ToTable("Relacion_Estudio_Paquete");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Study.ReagentStudy", b =>
                {
                    b.Property<int>("EstudioId")
                        .HasColumnType("int");

                    b.Property<Guid>("ReagentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsuarioCreoId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsuarioModId")
                        .HasColumnType("int");

                    b.HasKey("EstudioId", "ReagentId");

                    b.HasIndex("ReagentId");

                    b.ToTable("Relacion_Estudio_Reactivo");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Study.Study", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("Clave")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<int>("Dias")
                        .HasColumnType("int");

                    b.Property<int>("DiasResultado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormatoId")
                        .HasColumnType("int");

                    b.Property<int>("MaquiladorId")
                        .HasColumnType("int");

                    b.Property<int>("MetodoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NombreCorto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<bool>("Prioridad")
                        .HasColumnType("bit");

                    b.Property<int>("SampleTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TaponId")
                        .HasColumnType("int");

                    b.Property<int>("TiempoResultado")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Urgencia")
                        .HasColumnType("bit");

                    b.Property<Guid>("UsuarioCreoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioModId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("FormatoId");

                    b.HasIndex("MaquiladorId");

                    b.HasIndex("MetodoId");

                    b.HasIndex("SampleTypeId");

                    b.HasIndex("TaponId");

                    b.ToTable("CAT_Estudio");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Study.WorkListStudy", b =>
                {
                    b.Property<int>("EstudioId")
                        .HasColumnType("int");

                    b.Property<int>("WorkListId")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaMod")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsuarioCreoId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsuarioModId")
                        .HasColumnType("int");

                    b.HasKey("EstudioId", "WorkListId");

                    b.HasIndex("WorkListId");

                    b.ToTable("Relacion_Estudio_WorkList");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Tapon.Tapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CAT_Tipo_Tapon");
                });

            modelBuilder.Entity("Identidad.Api.Model.Medicos.MedicClinic", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Catalog.Clinic", "Clinica")
                        .WithMany()
                        .HasForeignKey("ClinicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Medics.Medics", "Medico")
                        .WithMany("Clinicas")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Clinica");

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Branch.Branch", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Constant.Colony", "Colonia")
                        .WithMany()
                        .HasForeignKey("ColoniaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colonia");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Branch.BranchDepartment", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Catalog.Department", "Departamento")
                        .WithMany()
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Branch.Branch", "Sucursal")
                        .WithMany("Departamentos")
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Departamento");

                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Catalog.Area", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Catalog.Department", "Departamento")
                        .WithMany()
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Company.Company", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Provenance.Provenance", "Procedencia")
                        .WithMany()
                        .HasForeignKey("ProcedenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Procedencia");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Company.Contact", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Company.Company", "Compañia")
                        .WithMany("Contacts")
                        .HasForeignKey("CompañiaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Compañia");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Company.Price_Company", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Company.Company", "Compañia")
                        .WithMany()
                        .HasForeignKey("CompañiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Price.PriceList", "PrecioLista")
                        .WithMany("Compañia")
                        .HasForeignKey("PrecioListaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Compañia");

                    b.Navigation("PrecioLista");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Constant.City", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Constant.State", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Constant.Colony", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Constant.City", "Ciudad")
                        .WithMany()
                        .HasForeignKey("CiudadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ciudad");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Indication.IndicationStudy", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Study.Study", "Estudio")
                        .WithMany("Indications")
                        .HasForeignKey("EstudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Indication.Indication", "Indicacion")
                        .WithMany("Estudios")
                        .HasForeignKey("IndicacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estudio");

                    b.Navigation("Indicacion");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Loyalty.Loyalty", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Price.PriceList", "PrecioLista")
                        .WithMany()
                        .HasForeignKey("PrecioListaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PrecioLista");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Maquila.Maquila", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Constant.Colony", "Colonia")
                        .WithMany()
                        .HasForeignKey("ColoniaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colonia");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Medics.Medics", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Constant.Colony", "Colonia")
                        .WithMany()
                        .HasForeignKey("ColoniaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Catalog.Field", "Especialidad")
                        .WithMany()
                        .HasForeignKey("EspecialidadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Colonia");

                    b.Navigation("Especialidad");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Packet.Packet", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Catalog.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Parameter.Parameter", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Catalog.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Catalog.Department", "Departmento")
                        .WithMany()
                        .HasForeignKey("DepartmentoId");

                    b.HasOne("Service.Catalog.Domain.Parameter.Format", "FormatoImpresion")
                        .WithMany()
                        .HasForeignKey("FormatoImpresionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Reagent.Reagent", "Reactivo")
                        .WithMany()
                        .HasForeignKey("ReactivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Departmento");

                    b.Navigation("FormatoImpresion");

                    b.Navigation("Reactivo");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Parameter.ParameterStudy", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Study.Study", "Estudio")
                        .WithMany("Parameters")
                        .HasForeignKey("EstudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Parameter.Parameter", "Parametro")
                        .WithMany("Estudios")
                        .HasForeignKey("ParametroId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estudio");

                    b.Navigation("Parametro");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Parameter.ParameterValue", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Parameter.Parameter", "Parametro")
                        .WithMany()
                        .HasForeignKey("ParametroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parametro");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Price.PriceList_Packet", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Packet.Packet", "Paquete")
                        .WithMany()
                        .HasForeignKey("PaqueteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Price.PriceList", "PrecioLista")
                        .WithMany("Paquete")
                        .HasForeignKey("PrecioListaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Paquete");

                    b.Navigation("PrecioLista");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Price.PriceList_Study", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Study.Study", "Estudio")
                        .WithMany()
                        .HasForeignKey("EstudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Price.PriceList", "PrecioLista")
                        .WithMany("Estudios")
                        .HasForeignKey("PrecioListaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estudio");

                    b.Navigation("PrecioLista");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Price.Price_Branch", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Price.PriceList", "PrecioLista")
                        .WithMany("Sucursales")
                        .HasForeignKey("PrecioListaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Branch.Branch", "Sucursal")
                        .WithMany()
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrecioLista");

                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Price.Price_Medics", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Medics.Medics", "Medico")
                        .WithMany()
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Price.PriceList", "PrecioLista")
                        .WithMany("Medicos")
                        .HasForeignKey("PrecioListaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Medico");

                    b.Navigation("PrecioLista");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Price.Price_Promotion", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Price.PriceList", "PrecioLista")
                        .WithMany("Promocion")
                        .HasForeignKey("PrecioListaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Promotion.Promotion", "Promocion")
                        .WithMany("prices")
                        .HasForeignKey("PromocionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrecioLista");

                    b.Navigation("Promocion");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Promotion.PromotionBranch", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Branch.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Promotion.Promotion", "Promotion")
                        .WithMany("branches")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Promotion.PromotionLoyality", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Loyalty.Loyalty", "loyalities")
                        .WithMany()
                        .HasForeignKey("LoyaltyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Promotion.Promotion", "Promotion")
                        .WithMany("loyalities")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("loyalities");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Promotion.PromotionPack", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Packet.Packet", "Pack")
                        .WithMany()
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Promotion.Promotion", "Promotion")
                        .WithMany("packs")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pack");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Promotion.PromotionStudy", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Promotion.Promotion", "Promotion")
                        .WithMany("studies")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Study.Study", "Study")
                        .WithMany()
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("Study");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Route.Route_Study", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Study.Study", "Estudio")
                        .WithMany()
                        .HasForeignKey("EstudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Route.Route", "Ruta")
                        .WithMany("Estudios")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estudio");

                    b.Navigation("Ruta");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Study.PacketStudy", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Study.Study", "Estudio")
                        .WithMany("Packets")
                        .HasForeignKey("EstudioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Packet.Packet", "Packet")
                        .WithMany("studies")
                        .HasForeignKey("PacketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estudio");

                    b.Navigation("Packet");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Study.ReagentStudy", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Study.Study", "Estudio")
                        .WithMany("Reagents")
                        .HasForeignKey("EstudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Reagent.Reagent", "Reagent")
                        .WithMany()
                        .HasForeignKey("ReagentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estudio");

                    b.Navigation("Reagent");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Study.Study", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Catalog.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Parameter.Format", "Formato")
                        .WithMany()
                        .HasForeignKey("FormatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Maquila.Maquila", "Maquilador")
                        .WithMany()
                        .HasForeignKey("MaquiladorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Catalog.Method", "Metodo")
                        .WithMany()
                        .HasForeignKey("MetodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Catalog.SampleType", "SampleType")
                        .WithMany()
                        .HasForeignKey("SampleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Tapon.Tapon", "Tapon")
                        .WithMany()
                        .HasForeignKey("TaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Formato");

                    b.Navigation("Maquilador");

                    b.Navigation("Metodo");

                    b.Navigation("SampleType");

                    b.Navigation("Tapon");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Study.WorkListStudy", b =>
                {
                    b.HasOne("Service.Catalog.Domain.Study.Study", "Estudio")
                        .WithMany("WorkLists")
                        .HasForeignKey("EstudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.Catalog.Domain.Catalog.WorkList", "WorkList")
                        .WithMany()
                        .HasForeignKey("WorkListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estudio");

                    b.Navigation("WorkList");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Branch.Branch", b =>
                {
                    b.Navigation("Departamentos");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Company.Company", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Indication.Indication", b =>
                {
                    b.Navigation("Estudios");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Medics.Medics", b =>
                {
                    b.Navigation("Clinicas");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Packet.Packet", b =>
                {
                    b.Navigation("studies");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Parameter.Parameter", b =>
                {
                    b.Navigation("Estudios");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Price.PriceList", b =>
                {
                    b.Navigation("Compañia");

                    b.Navigation("Estudios");

                    b.Navigation("Medicos");

                    b.Navigation("Paquete");

                    b.Navigation("Promocion");

                    b.Navigation("Sucursales");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Promotion.Promotion", b =>
                {
                    b.Navigation("branches");

                    b.Navigation("loyalities");

                    b.Navigation("packs");

                    b.Navigation("prices");

                    b.Navigation("studies");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Route.Route", b =>
                {
                    b.Navigation("Estudios");
                });

            modelBuilder.Entity("Service.Catalog.Domain.Study.Study", b =>
                {
                    b.Navigation("Indications");

                    b.Navigation("Packets");

                    b.Navigation("Parameters");

                    b.Navigation("Reagents");

                    b.Navigation("WorkLists");
                });
#pragma warning restore 612, 618
        }
    }
}
